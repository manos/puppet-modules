init.pp docs:

# Ruby rvm installer and manager.
# Charlie Schluting <charlie@schluting.com>
# == Overview
# Manages ruby version and their gems, optionally installing gem programs as system binaries.
# NOTE: this is causing a lot of confusion. This is NOT virtualenv. You can only install ONE
# version of ruby at a time. If you really want to have multiple versions of runy 1.9.3, e.g.,
# then specify the patch level. You shouldn't need to do this thought.
#
# Again, this is not for 'environment isolation' - stop thinking of it as virtualenv. This is
# for managing multiple versions of ruby, i.e. rvm!
#
# == Sample Usage
# Most complex example:
# To get cloudkick installed, in a 1.8.7 ruby env, and runnable via /usr/local/bin/cloudkick:
# ruby::ruby_install { "1.8.7":  ruby_version => "1.8.7", ruby_env => "cloudkick", } ->
# ruby::gem_install { "crack":   ruby_env => "cloudkick", gem_version => "0.1.8" }
# ruby::gem_install { "jeweler": ruby_env => "cloudkick", gem_version => "1.6.4" }
# ruby::gem_install { "cloudkick": ruby_env => "cloudkick", install_bin => "cloudkick", force_bin_overwrite => true }
#
# Trivial example, which is done by default:
# # install ruby 1.9.3 and call it "newhotness":
# ruby::ruby_install { "1.9.3": ruby_version => '1.9.3', ruby_env => 'newhotness', }
#
# And install a random gem in it:
# ruby::gem_install { "zzzzzz": ruby_env => "newhotness" }
#
# Note: if you have two ruby_envs in scope on the same server, you'll get conflicts installing the same gem in each.
# In this case, name the call something different, and explicitly pass gem => "name_of_gem" (i.e. the define uses $name by default).
#
# Note: we distribute the rvm install script to eliminate the file download as an external dependency. It's probably outdated now.
